name: Deploy bots

on:
  push:
    branches:
      - main
      - stage

jobs:
  deploy-prod:
    name: Deploy PROD (main)
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy over SSH to PROD
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || '22' }}
          script_stop: true
          script: |
            set -euo pipefail

            BASE_DIR="/home/deploy/apps"
            APP_DIR="$BASE_DIR/birthdaybot"
            REPO_URL="https://github.com/smmac72/birthdaybot.git"
            BRANCH="main"

            mkdir -p "$BASE_DIR"

            if [ -d "$APP_DIR/.git" ]; then
              cd "$APP_DIR"
              git fetch --all --prune
              git checkout "$BRANCH"
              git reset --hard "origin/$BRANCH"
            else
              cd "$BASE_DIR"
              git clone --depth=1 --branch "$BRANCH" "$REPO_URL" birthdaybot
              cd "$APP_DIR"
            fi

            test -f .env.prod || { echo "ERROR: .env.prod not found"; exit 1; }

            docker compose build --pull
            docker compose --env-file .env.prod up -d birthdaybot-prod adminbot-prod
            docker image prune -f


  deploy-stg:
    name: Deploy STAGE (stage)
    if: github.ref == 'refs/heads/stage'
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Deploy over SSH to STAGE
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || '22' }}
          script_stop: true
          script: |
            set -euo pipefail

            BASE_DIR="/home/deploy/apps"
            APP_DIR="$BASE_DIR/birthdaybot"
            REPO_URL="https://github.com/smmac72/birthdaybot.git"
            BRANCH="stage"

            mkdir -p "$BASE_DIR"

            if [ -d "$APP_DIR/.git" ]; then
              cd "$APP_DIR"
              git fetch --all --prune
              git checkout "$BRANCH"
              git reset --hard "origin/$BRANCH"
            else
              cd "$BASE_DIR"
              git clone --depth=1 --branch "$BRANCH" "$REPO_URL" birthdaybot
              cd "$APP_DIR"
            fi

            test -f .env.stg || { echo "ERROR: .env.stg not found"; exit 1; }

            docker compose build --pull
            docker compose --env-file .env.stg up -d birthdaybot-stg adminbot-stg
            docker image prune -f
