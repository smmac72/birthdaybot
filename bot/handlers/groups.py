from __future__ import annotations
import logging
import re
import uuid
from typing import Optional, List, Dict, Any

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

from ..db.repo_groups import GroupsRepo
from ..db.repo_users import UsersRepo
from ..keyboards import groups_menu_kb, group_mgmt_kb

# states
STATE_WAIT_GROUP_NAME = 0
STATE_WAIT_JOIN_CODE = 1
STATE_WAIT_LEAVE_CODE = 2
STATE_WAIT_RENAME = 3
STATE_WAIT_ADD_MEMBER = 4
STATE_WAIT_DEL_MEMBER = 5

def _log_id() -> str:
    return uuid.uuid4().hex[:8]

def _cancel_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([["‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)

def _icon_registered(user_id: Optional[int]) -> str:
    return "‚úÖ" if user_id else "‚ö™Ô∏è"

def _fmt_bday(d, m, y) -> str:
    if d and m:
        return f"{int(d):02d}-{int(m):02d}" + (f"-{int(y)}" if y else "")
    return "–Ω–µ —É–∫–∞–∑–∞–Ω"

def _valid_date(d: int, m: int, y: Optional[int]) -> bool:
    import datetime as dt
    try:
        if y is None:
            y = 2000
        dt.date(int(y), int(m), int(d))
        return True
    except Exception:
        return False

def _days_until_key(d: Optional[int], m: Optional[int]) -> int:
    if not d or not m:
        return 10**9
    import datetime as dt
    today = dt.date.today()
    try:
        target = dt.date(today.year, m, d)
    except ValueError:
        return 10**9
    if target < today:
        target = target.replace(year=today.year + 1)
    return (target - today).days

def _when_str(days: int) -> str:
    if days == 0:
        return "—Å–µ–≥–æ–¥–Ω—è"
    if days >= 10**8:
        return "–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    return f"—á–µ—Ä–µ–∑ {days} –¥–Ω."

def _member_line(m: Dict[str, Any]) -> str:
    icon = _icon_registered(m.get("user_id"))
    name = f"@{m['username']}" if m.get("username") else (f"id:{m['user_id']}" if m.get("user_id") else "unknown")
    bd = _fmt_bday(m.get("birth_day"), m.get("birth_month"), m.get("birth_year"))
    dleft = _days_until_key(m.get("birth_day"), m.get("birth_month"))
    when = _when_str(dleft)
    return f"‚Ä¢ {icon} {name} ‚Äî {bd} ({when})"

class GroupsHandler:
    def __init__(self, groups: GroupsRepo, users: UsersRepo):
        self.groups = groups
        self.users = users
        self.log = logging.getLogger("groups")

    async def menu_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        rid = _log_id()
        uid = update.effective_user.id
        self.log.info("[%s] menu_entry: user_id=%s", rid, uid)

        try:
            rows = await self.groups.list_user_groups(uid)
            cnt = len(rows)
            self.log.info("[%s] menu_entry: groups_count=%s", rid, cnt)
        except Exception as e:
            self.log.exception("[%s] menu_entry failed: %s", rid, e)
            await update.message.reply_text("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.", reply_markup=groups_menu_kb())
            return

        if not rows:
            await update.message.reply_text("—É –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.", reply_markup=groups_menu_kb())
            return

        lines = ["–≤–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n"]
        for g in rows:
            g = dict(g)
            mark = " üëë –≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å" if g.get("creator_user_id") == uid else ""
            lines.append(f"üìå {g['name']} (–∫–æ–¥: {g['code']}) ‚Äî {int(g.get('member_count', 0))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤{mark}")

        await update.message.reply_text("\n\n".join(["\n".join(lines), "–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"]), reply_markup=groups_menu_kb())

    async def manage_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id
        try:
            rows = await self.groups.list_user_groups(uid)
        except Exception:
            rows = []
        managed = [dict(r) for r in rows if int(r.get("creator_user_id", 0)) == uid]

        if not managed:
            await update.message.reply_text("—É –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.", reply_markup=groups_menu_kb())
            return

        kb = ReplyKeyboardMarkup(
            [[f"üõ† {g['name']} ({g['code']})"] for g in managed] + [["‚¨ÖÔ∏è –≤—ã–π—Ç–∏"]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        await update.message.reply_text("–≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

    async def _render_group_members(self, update: Update, gid: str) -> List[Dict[str, Any]]:
        members = await self.groups.list_members(gid)
        members = [dict(m) for m in members]
        members.sort(key=lambda m: _days_until_key(m.get("birth_day"), m.get("birth_month")))
        lines = [f"—É—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members)}):"]
        for m in members:
            lines.append(_member_line(m))
        await update.message.reply_text("\n".join(lines))
        return members

    # create
    async def create_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=_cancel_kb())
        return STATE_WAIT_GROUP_NAME

    async def create_wait_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (update.message.text or "").strip()
        if text == "‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        name = text
        gid, code = await self.groups.create_group(name, update.effective_user.id)
        await update.message.reply_text(f"–≥—Ä—É–ø–ø–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞.\n–∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {code}", reply_markup=groups_menu_kb())

        # reschedule for creator (their followers might need it)
        notif = context.application.bot_data.get("notif_service")
        if notif:
            try:
                await notif.reschedule_for_person(update.effective_user.id, update.effective_user.username)
            except Exception as e:
                self.log.exception("reschedule after create group failed: %s", e)

        return ConversationHandler.END

    # join
    async def join_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥—Ä—É–ø–ø—ã:", reply_markup=_cancel_kb())
        return STATE_WAIT_JOIN_CODE

    async def join_wait_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        code = (update.message.text or "").strip()
        if code == "‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        ok, name = await self.groups.join_by_code(code, update.effective_user.id)
        if ok:
            await update.message.reply_text(f"–≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ '{name}'.", reply_markup=groups_menu_kb())
            notif = context.application.bot_data.get("notif_service")
            if notif:
                try:
                    await notif.reschedule_for_person(update.effective_user.id, update.effective_user.username)
                except Exception as e:
                    self.log.exception("reschedule after join failed: %s", e)
        else:
            await update.message.reply_text("–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –≤—ã —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ.", reply_markup=groups_menu_kb())
        return ConversationHandler.END

    # leave
    async def leave_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞:", reply_markup=_cancel_kb())
        return STATE_WAIT_LEAVE_CODE

    async def leave_wait_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        code = (update.message.text or "").strip()
        if code == "‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        ok, name = await self.groups.leave_by_code(code, update.effective_user.id)
        if ok:
            await update.message.reply_text(f"–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É '{name}'.", reply_markup=groups_menu_kb())
            notif = context.application.bot_data.get("notif_service")
            if notif:
                try:
                    await notif.reschedule_for_person(update.effective_user.id, update.effective_user.username)
                except Exception as e:
                    self.log.exception("reschedule after leave failed: %s", e)
        else:
            await update.message.reply_text("–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–µ–π.", reply_markup=groups_menu_kb())
        return ConversationHandler.END

    # manage entry
    async def manage_entry(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (update.message.text or "")
        m = re.match(r"^üõ†\s+(.+)\s+\(([\w-]+)\)$", text)
        if not m:
            await update.message.reply_text("–≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –º–µ–Ω—é.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        code = m.group(2)
        g = await self.groups.get_by_code(code)
        if not g:
            await update.message.reply_text("–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=groups_menu_kb())
            return ConversationHandler.END

        gid = g["group_id"]
        context.user_data["mgmt_gid"] = gid

        await update.message.reply_text(f"–≥—Ä—É–ø–ø–∞: {g['name']}")
        await self._render_group_members(update, gid)
        await update.message.reply_text("–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=group_mgmt_kb())
        return ConversationHandler.END

    # rename
    async def rename_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gid = context.user_data.get("mgmt_gid")
        if not gid:
            await update.message.reply_text("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        await update.message.reply_text("–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã:", reply_markup=_cancel_kb())
        return STATE_WAIT_RENAME

    async def rename_wait(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gid = context.user_data.get("mgmt_gid")
        if not gid:
            await update.message.reply_text("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        text = (update.message.text or "").strip()
        if text == "‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=group_mgmt_kb())
            return ConversationHandler.END
        await self.groups.rename_group(gid, text)
        await update.message.reply_text("–∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await self._render_group_members(update, gid)
        await update.message.reply_text("–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=group_mgmt_kb())
        return ConversationHandler.END

    # add member
    async def add_member_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gid = context.user_data.get("mgmt_gid")
        if not gid:
            await update.message.reply_text("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        await update.message.reply_text(
            "–≤–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id. –º–æ–∂–Ω–æ —Å –¥–∞—Ç–æ–π: @user –¥–¥-–º–º(-–≥–≥–≥–≥).\n–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ ‚Äî –¥–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.",
            reply_markup=_cancel_kb(),
        )
        return STATE_WAIT_ADD_MEMBER

    async def add_member_wait(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gid = context.user_data.get("mgmt_gid")
        if not gid:
            await update.message.reply_text("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.", reply_markup=groups_menu_kb())
            return ConversationHandler.END

        text = (update.message.text or "").strip()
        if text == "‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=group_mgmt_kb())
            return ConversationHandler.END

        parts = text.split()
        username = None; user_id: Optional[int] = None
        if parts:
            if parts[0].startswith("@"):
                username = parts[0][1:]
            elif parts[0].isdigit():
                try:
                    user_id = int(parts[0])
                except Exception:
                    user_id = None

        m = re.search(r"\b(\d{2})-(\d{2})(?:-(\d{4}))?\b", text)
        bd = None
        if m:
            d, mo = int(m.group(1)), int(m.group(2))
            y = int(m.group(3)) if m.group(3) else None
            if _valid_date(d, mo, y):
                bd = (d, mo, y)

        # resolve registered profile if possible
        prof = None
        if user_id:
            prof = await self.users.get_user(user_id)
        elif username:
            prof = await self.users.get_user_by_username(username)
        prof = dict(prof) if prof else None

        notif = context.application.bot_data.get("notif_service")

        if prof:
            await self.groups.add_member(
                gid, prof.get("user_id"), prof.get("username"),
                prof.get("birth_day"), prof.get("birth_month"), prof.get("birth_year"),
            )
            # reschedule: target person only
            if notif:
                try:
                    await notif.reschedule_for_person(prof.get("user_id"), prof.get("username"))
                except Exception as e:
                    self.log.exception("reschedule add member failed: %s", e)
            await update.message.reply_text("—É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            if not bd:
                await update.message.reply_text("—ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–æ—Ç–µ. —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –¥–¥-–º–º(-–≥–≥–≥–≥).", reply_markup=_cancel_kb())
                return STATE_WAIT_ADD_MEMBER
            d, mo, y = bd
            await self.groups.add_member(gid, user_id, username, d, mo, y)
            await update.message.reply_text("—É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")

        await self._render_group_members(update, gid)
        await update.message.reply_text("–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=group_mgmt_kb())
        return ConversationHandler.END

    # delete member
    async def del_member_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gid = context.user_data.get("mgmt_gid")
        if not gid:
            await update.message.reply_text("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.", reply_markup=groups_menu_kb())
            return ConversationHandler.END
        await update.message.reply_text("–≤–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=_cancel_kb())
        return STATE_WAIT_DEL_MEMBER

    async def del_member_wait(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gid = context.user_data.get("mgmt_gid")
        if not gid:
            await update.message.reply_text("—Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.", reply_markup=groups_menu_kk())
            return ConversationHandler.END

        text = (update.message.text or "").strip()
        if text == "‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text("–æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=group_mgmt_kb())
            return ConversationHandler.END

        if text.isdigit():
            target_id = int(text)
            target_un = None
        elif text.startswith("@"):
            target_id = None
            target_un = text[1:]
        else:
            await update.message.reply_text("—É–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ id")
            return STATE_WAIT_DEL_MEMBER

        # do not allow kicking self
        if target_id and target_id == update.effective_user.id:
            await update.message.reply_text("–Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è. –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üö™ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É'.", reply_markup=group_mgmt_kb())
            return ConversationHandler.END

        ok = False
        try:
            ok = await self.groups.remove_member(gid, target_user_id=target_id, username=target_un)
        except Exception:
            ok = False

        # reschedule for person if registered id
        notif = context.application.bot_data.get("notif_service")
        if ok and target_id and notif:
            try:
                await notif.reschedule_for_person(target_id)
            except Exception as e:
                self.log.exception("reschedule after delete member failed: %s", e)

        await update.message.reply_text("—É—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω." if ok else "–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        await self._render_group_members(update, gid)
        await update.message.reply_text("–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=group_mgmt_kb())
        return ConversationHandler.END

    def conversation_handlers(self):
        return [
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex("^‚ûï —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É$"), self.create_start)],
                states={STATE_WAIT_GROUP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.create_wait_name)]},
                fallbacks=[MessageHandler(filters.Regex("^‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞$"), self.menu_entry)],
                name="conv_group_create",
                persistent=False,
            ),
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex("^üîë –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ$"), self.join_start)],
                states={STATE_WAIT_JOIN_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.join_wait_code)]},
                fallbacks=[MessageHandler(filters.Regex("^‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞$"), self.menu_entry)],
                name="conv_group_join",
                persistent=False,
            ),
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex("^üö™ –ø–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É$"), self.leave_start)],
                states={STATE_WAIT_LEAVE_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.leave_wait_code)]},
                fallbacks=[MessageHandler(filters.Regex("^‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞$"), self.menu_entry)],
                name="conv_group_leave",
                persistent=False,
            ),
            MessageHandler(filters.Regex("^üìù —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏$"), self.manage_menu),
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex(r"^üõ† .+ \(.+\)$"), self.manage_entry)],
                states={},
                fallbacks=[],
                name="conv_group_manage_entry",
                persistent=False,
            ),
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex("^‚úèÔ∏è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É$"), self.rename_start)],
                states={STATE_WAIT_RENAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.rename_wait)]},
                fallbacks=[MessageHandler(filters.Regex("^‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞$"), self.manage_entry)],
                name="conv_group_rename",
                persistent=False,
            ),
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex("^‚ûï –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞$"), self.add_member_start)],
                states={STATE_WAIT_ADD_MEMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_member_wait)]},
                fallbacks=[MessageHandler(filters.Regex("^‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞$"), self.manage_entry)],
                name="conv_group_add_member",
                persistent=False,
            ),
            ConversationHandler(
                entry_points=[MessageHandler(filters.Regex("^üóë —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞$"), self.del_member_start)],
                states={STATE_WAIT_DEL_MEMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.del_member_wait)]},
                fallbacks=[MessageHandler(filters.Regex("^‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞$"), self.manage_entry)],
                name="conv_group_del_member",
                persistent=False,
            ),
        ]
